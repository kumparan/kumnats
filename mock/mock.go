// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kumparan/kumnats (interfaces: NATS)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	go_nats_streaming "github.com/nats-io/go-nats-streaming"
	reflect "reflect"
)

// MockNATS is a mock of NATS interface
type MockNATS struct {
	ctrl     *gomock.Controller
	recorder *MockNATSMockRecorder
}

// MockNATSMockRecorder is the mock recorder for MockNATS
type MockNATSMockRecorder struct {
	mock *MockNATS
}

// NewMockNATS creates a new mock instance
func NewMockNATS(ctrl *gomock.Controller) *MockNATS {
	mock := &MockNATS{ctrl: ctrl}
	mock.recorder = &MockNATSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNATS) EXPECT() *MockNATSMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockNATS) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockNATSMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNATS)(nil).Close))
}

// Publish mocks base method
func (m *MockNATS) Publish(arg0 string, arg1 []byte) error {
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockNATSMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNATS)(nil).Publish), arg0, arg1)
}

// QueueSubscribe mocks base method
func (m *MockNATS) QueueSubscribe(arg0, arg1 string, arg2 go_nats_streaming.MsgHandler, arg3 ...go_nats_streaming.SubscriptionOption) (go_nats_streaming.Subscription, error) {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueueSubscribe", varargs...)
	ret0, _ := ret[0].(go_nats_streaming.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueSubscribe indicates an expected call of QueueSubscribe
func (mr *MockNATSMockRecorder) QueueSubscribe(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockNATS)(nil).QueueSubscribe), varargs...)
}

// SafePublish mocks base method
func (m *MockNATS) SafePublish(arg0 string, arg1 []byte) error {
	ret := m.ctrl.Call(m, "SafePublish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SafePublish indicates an expected call of SafePublish
func (mr *MockNATSMockRecorder) SafePublish(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafePublish", reflect.TypeOf((*MockNATS)(nil).SafePublish), arg0, arg1)
}

// Subscribe mocks base method
func (m *MockNATS) Subscribe(arg0 string, arg1 go_nats_streaming.MsgHandler, arg2 ...go_nats_streaming.SubscriptionOption) (go_nats_streaming.Subscription, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(go_nats_streaming.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockNATSMockRecorder) Subscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNATS)(nil).Subscribe), varargs...)
}
